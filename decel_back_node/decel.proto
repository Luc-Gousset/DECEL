syntax = "proto3";

package DECEL;

enum MESSAGE_ANSW_ERROR {
	OK = 0;
	KO = 1;
}


enum GPIO_MESSAGE_ASK_TYPE {
	GET_STATE		= 0; //Demande de l'état actuelle du gpio 0 = input, 1 = output, -1 = Z
	SET_STATE_Z 	= 1;
	SET_STATE_O 	= 2;
	SET_STATE_I		= 3;
	GET_READ_VALUE 	= 4; //Demande de valeur lu par le GPIO, si pas en mode lecture, renvoie -1
	SET_OUTPUT 		= 5;
	CLEAR_OUTPUT 	= 6;
}


enum GPIO_MESSAGE_ANSW_TYPE {
	VALUE		= 0; //Demande de l'état actuelle du gpio 0 = input, 1 = output, -1 = Z
	DIRECTION 	= 1;
}

message GPIO_ASK {
	int32 gpio_id 				= 1; //Id du gpio, -1 == all gpio
	GPIO_MESSAGE_ASK_TYPE type_message 	= 2;
}



message GPIO_ANSW {
	int32 gpio_id = 1; //Id du gpio, -1 == all gpio
    GPIO_MESSAGE_ANSW_TYPE type_message = 2;
	optional uint32 value = 3;
}

enum MCP4922_message_type {
    SET_VALUE = 0;
    SHUTDOWN = 1;
}

message MCP4922_ASK {
    uint32 MCP4922_id = 1;
uint32 DAC_Chanel = 2;
    MCP4922_message_type type = 3;
    optional uint32 value = 4;

}

message ANALOG_IN {
    uint32 ANALOG_IN_id = 1;
    uint32 value = 2;
}


message DECEL_ASK {
	oneof msg {
		GPIO_ASK gpio_ask = 1;
        MCP4922_ASK mcp4922_ask = 2;
	}
}

message DECEL_ANSW {
	oneof msg {
		GPIO_ANSW gpio_answ = 1;
        ANALOG_IN analog_in_answ = 2;
	}
}